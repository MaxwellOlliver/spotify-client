[{"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\App.tsx":"1","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\WrapContainer\\WrapContainer.tsx":"2","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\theme\\index.ts":"3","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\WrapContainer\\styles.ts":"4","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\global\\globalStyles.ts":"5","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Player\\index.tsx":"6","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\config\\token.ts":"7","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\store\\index.ts":"8","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\store\\modules\\player\\reducer.ts":"9","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\store\\modules\\player\\actions.ts":"10","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\WrapContainer\\routes.tsx":"11","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\Home\\index.tsx":"12","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\routes.js":"13","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Controllers\\styles.ts":"14","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Controllers\\index.tsx":"15","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\index.tsx":"16","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\Home\\styles.ts":"17","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Playlist\\index.tsx":"18"},{"size":356,"mtime":1608240680109,"results":"19","hashOfConfig":"20"},{"size":2344,"mtime":1609611405483,"results":"21","hashOfConfig":"20"},{"size":202,"mtime":1608146661748,"results":"22","hashOfConfig":"20"},{"size":6552,"mtime":1609609897938,"results":"23","hashOfConfig":"20"},{"size":859,"mtime":1609609623238,"results":"24","hashOfConfig":"20"},{"size":5974,"mtime":1609274490755,"results":"25","hashOfConfig":"20"},{"size":346,"mtime":1609609240988,"results":"26","hashOfConfig":"20"},{"size":149,"mtime":1608240680051,"results":"27","hashOfConfig":"20"},{"size":1389,"mtime":1608332380393,"results":"28","hashOfConfig":"20"},{"size":377,"mtime":1608320640125,"results":"29","hashOfConfig":"20"},{"size":219,"mtime":1608311442769,"results":"30","hashOfConfig":"20"},{"size":2280,"mtime":1609611753271,"results":"31","hashOfConfig":"20"},{"size":298,"mtime":1608311767741,"results":"32","hashOfConfig":"20"},{"size":4804,"mtime":1608326764825,"results":"33","hashOfConfig":"20"},{"size":7837,"mtime":1608322847289,"results":"34","hashOfConfig":"20"},{"size":197,"mtime":1608145654990,"results":"35","hashOfConfig":"20"},{"size":2059,"mtime":1609609863258,"results":"36","hashOfConfig":"20"},{"size":564,"mtime":1609611782046,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4hjqni",{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\App.tsx",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\WrapContainer\\WrapContainer.tsx",["79","80","81"],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\theme\\index.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\WrapContainer\\styles.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\global\\globalStyles.ts",["82"],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Player\\index.tsx",["83","84","85","86","87"],"import React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nimport { FiPause, FiPlay, FiSkipBack, FiSkipForward } from 'react-icons/fi';\r\nimport { BiRepeat, BiShuffle } from 'react-icons/bi';\r\n\r\nimport { Spotify } from '../../services/spotifyApi';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { PlayerAction } from '../../store/modules/player/actions';\r\n\r\nconst Player: React.FC = () => {\r\n  const player: any = useSelector((state) => state);\r\n  const dispatch: Dispatch = useDispatch();\r\n\r\n  const fillRef = useRef<HTMLSpanElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  async function getResources(): Promise<void> {\r\n    const { data: playerInfo }: any = await Spotify({\r\n      method: 'get',\r\n      url: '/me/player',\r\n    });\r\n\r\n    if (playerInfo) {\r\n      dispatch({\r\n        type: PlayerAction.SET_CURRENTLY_PLAYER,\r\n        payload: {\r\n          is_playing: playerInfo.is_playing,\r\n          selected_device: playerInfo.device,\r\n          shuffle: playerInfo.shuffle_state,\r\n          repeat: playerInfo.repeat_state,\r\n          music: playerInfo.item,\r\n          volume: playerInfo.device?.volume_percent,\r\n          progress: playerInfo.progress_ms,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async function setBar() {\r\n    if (fillRef.current && inputRef.current) {\r\n      fillRef.current.style.width = `${inputRef.current.value}%`;\r\n\r\n      const ms = Math.round(\r\n        (Number(inputRef.current.value) * player.music.duration_ms) / 100\r\n      );\r\n      await Spotify({\r\n        method: 'put',\r\n        url: `/me/player/seek?position_ms=${ms}`,\r\n      });\r\n      dispatch({\r\n        type: PlayerAction.SET_PROGRESS,\r\n        payload: {\r\n          progress: ms,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getResources();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const t = setInterval(getCurrentlyMusic, 3000);\r\n\r\n    return () => clearInterval(t);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fillRef.current && inputRef.current) {\r\n      const value = (100 * player.progress) / player.music.duration_ms;\r\n\r\n      fillRef.current.style.width = `${value}%`;\r\n      inputRef.current.value = String(value);\r\n    }\r\n  }, [player.progress]);\r\n\r\n  async function playPlayback(): Promise<void> {\r\n    Spotify({\r\n      method: 'put',\r\n      url: `/me/player/play?device_id=${player.selected_device.id}`,\r\n    });\r\n\r\n    dispatch({ type: PlayerAction.PLAY });\r\n  }\r\n\r\n  async function pausePlayback(): Promise<void> {\r\n    Spotify({\r\n      method: 'put',\r\n      url: '/me/player/pause',\r\n    });\r\n\r\n    dispatch({ type: PlayerAction.PAUSE });\r\n  }\r\n\r\n  async function nextInQueue(): Promise<void> {\r\n    await Spotify({\r\n      method: 'post',\r\n      url: '/me/player/next',\r\n    });\r\n  }\r\n\r\n  async function previousInQueue(): Promise<void> {\r\n    Spotify({\r\n      method: 'post',\r\n      url: '/me/player/previous',\r\n    });\r\n  }\r\n\r\n  async function shufflePlayblack(): Promise<void> {\r\n    Spotify({\r\n      method: 'put',\r\n      url: `/me/player/shuffle?state=${player?.shuffle ? false : true}`,\r\n    });\r\n\r\n    dispatch({\r\n      type: PlayerAction.SHUFFLE,\r\n      payload: { shuffle: player?.shuffle ? false : true },\r\n    });\r\n  }\r\n\r\n  const getCurrentlyMusic = async () => {\r\n    const { data: currentlyMusic }: any = await Spotify({\r\n      method: 'get',\r\n      url: `/me/player/currently-playing?market=BR`,\r\n    });\r\n\r\n    dispatch({\r\n      type: PlayerAction.SET_MUSIC,\r\n      payload: { music: currentlyMusic.item },\r\n    });\r\n    dispatch({\r\n      type: PlayerAction.SET_PROGRESS,\r\n      payload: { progress: currentlyMusic.progress_ms },\r\n    });\r\n    if (currentlyMusic.is_playing) {\r\n      dispatch({ type: PlayerAction.PLAY });\r\n    } else {\r\n      dispatch({ type: PlayerAction.PAUSE });\r\n    }\r\n  };\r\n\r\n  async function repeat(): Promise<void> {\r\n    const state =\r\n      player.repeat === 'off'\r\n        ? 'context'\r\n        : player.repeat === 'context'\r\n        ? 'track'\r\n        : player.repeat === 'track' && 'off';\r\n    Spotify({\r\n      method: 'put',\r\n      url: `/me/player/repeat?state=${state}`,\r\n    });\r\n\r\n    dispatch({ type: PlayerAction.REPEAT, payload: { repeat: state } });\r\n  }\r\n\r\n  return player.music ? (\r\n    <div className=\"player-info\">\r\n      <span className=\"playing-now\">Ouvindo agora</span>\r\n      <img src={player?.music?.album?.images[0].url} alt=\"album\" />\r\n      <span className=\"music-title\">{player?.music?.name}</span>\r\n      <span className=\"artists\">\r\n        {player?.music?.artists?.map((art: any) => art.name).join(', ')}\r\n      </span>\r\n      <div className=\"controllers\">\r\n        <BiShuffle\r\n          size={18}\r\n          color=\"#fff\"\r\n          className={player?.shuffle ? 'active-bi' : ''}\r\n          onClick={shufflePlayblack}\r\n        />\r\n        <FiSkipBack size={18} color=\"#fff\" onClick={previousInQueue} />\r\n        {player?.is_playing ? (\r\n          <FiPause size={22} color=\"#fff\" onClick={pausePlayback} />\r\n        ) : (\r\n          <FiPlay size={22} color=\"#fff\" onClick={playPlayback} />\r\n        )}\r\n        <FiSkipForward size={18} color=\"#fff\" onClick={nextInQueue} />\r\n        <div className=\"repeat\" onClick={repeat}>\r\n          {player?.repeat === 'off' ? (\r\n            <BiRepeat size={18} color=\"#fff\" />\r\n          ) : (\r\n            <BiRepeat size={18} color=\"#fff\" className=\"active-bi\" />\r\n          )}\r\n          {player?.repeat === 'track' && (\r\n            <div className=\"repeat-balloon\">1</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"slider-container\">\r\n        <span className=\"bar\">\r\n          <span className=\"fill\" ref={fillRef}></span>\r\n        </span>\r\n        <input\r\n          type=\"range\"\r\n          name=\"time\"\r\n          id=\"time\"\r\n          min={0}\r\n          max={100}\r\n          step={0.1}\r\n          ref={inputRef}\r\n          onChange={setBar}\r\n        />\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default Player;\r\n",["88","89"],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\config\\token.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\store\\index.ts",[],["90","91"],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\store\\modules\\player\\reducer.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\store\\modules\\player\\actions.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\WrapContainer\\routes.tsx",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\Home\\index.tsx",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\routes.js",[],["92","93"],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Controllers\\styles.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Controllers\\index.tsx",["94"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  FiAirplay,\r\n  FiMusic,\r\n  FiTablet,\r\n  FiVolume1,\r\n  FiVolume2,\r\n  FiVolumeX,\r\n} from 'react-icons/fi';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Spotify } from '../../services/spotifyApi';\r\nimport { PlayerAction } from '../../store/modules/player/actions';\r\n\r\nimport desktop from '../../assets/desktop.png';\r\n\r\nimport { Container } from './styles';\r\nimport { BiDesktop } from 'react-icons/bi';\r\nimport { AiOutlineDesktop } from 'react-icons/ai';\r\n\r\nconst Controllers: React.FC = () => {\r\n  const player: any = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const [volumeModal, setVolumeModal] = useState(false);\r\n  const [devicesModal, setDevicesModal] = useState(false);\r\n  const [devices, setDevices] = useState([]);\r\n\r\n  const fillRef = useRef<HTMLSpanElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  async function setVolume() {\r\n    if (fillRef.current && inputRef.current) {\r\n      fillRef.current.style.width = `${inputRef.current.value}%`;\r\n\r\n      await Spotify({\r\n        method: 'put',\r\n        url: `/me/player/volume?volume_percent=${inputRef.current.value}&device_id=${player.selected_device.id}`,\r\n      });\r\n      dispatch({\r\n        type: PlayerAction.SET_VOLUME,\r\n        payload: {\r\n          volume: inputRef.current.value,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  function openVolumeModal() {\r\n    if (volumeModal) {\r\n      setVolumeModal(false);\r\n    } else {\r\n      setVolumeModal(true);\r\n    }\r\n  }\r\n\r\n  async function openDevicesModal() {\r\n    if (devicesModal) {\r\n      setDevicesModal(false);\r\n    } else {\r\n      const {\r\n        data: { devices },\r\n      }: any = await Spotify({\r\n        method: 'get',\r\n        url: '/me/player/devices',\r\n      });\r\n\r\n      setDevices(devices);\r\n      setDevicesModal(true);\r\n    }\r\n  }\r\n\r\n  async function transferPlayback(device: any) {\r\n    await Spotify({\r\n      method: 'put',\r\n      url: '/me/player',\r\n      data: {\r\n        device_ids: [device.id],\r\n      },\r\n    });\r\n\r\n    setDevices((devicesState: any) => {\r\n      const deviceActive = devicesState.map((d: any) => {\r\n        if (d.id === device.id) {\r\n          d.is_active = true;\r\n\r\n          return d;\r\n        }\r\n\r\n        if (d.id === player.selected_device.id) {\r\n          d.is_active = false;\r\n\r\n          return d;\r\n        }\r\n\r\n        return d;\r\n      });\r\n\r\n      return deviceActive;\r\n    });\r\n\r\n    dispatch({ type: PlayerAction.SET_SELECTED_DEVICE, payload: { device } });\r\n    dispatch({\r\n      type: PlayerAction.SET_VOLUME,\r\n      payload: { volume: device.volume_percent },\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    let volume = document.querySelector('.volume');\r\n    let devices = document.querySelector('.devices');\r\n\r\n    document.addEventListener('click', (e: any) => {\r\n      if (volume && !volume.contains(e.target)) {\r\n        setVolumeModal(false);\r\n      }\r\n\r\n      if (devices && !devices.contains(e.target)) {\r\n        setDevicesModal(false);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      let volume = document.querySelector('.volume');\r\n\r\n      document.removeEventListener('click', (e: any) => {\r\n        if (volume && !volume.contains(e.target)) {\r\n          setVolumeModal(false);\r\n        }\r\n\r\n        if (devices && !devices.contains(e.target)) {\r\n          setDevicesModal(false);\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n  return (\r\n    <Container>\r\n      <div className=\"volume\">\r\n        {player.volume > 50 ? (\r\n          <FiVolume2\r\n            size={20}\r\n            color=\"#fff\"\r\n            title={\r\n              player.selected_device.type === 'Smartphone'\r\n                ? 'Não é possível controlar o volume em aparelhos móveis'\r\n                : ''\r\n            }\r\n            className={\r\n              player.selected_device.type === 'Smartphone' ? 'is-smart' : ''\r\n            }\r\n            onClick={\r\n              player.selected_device.type === 'Smartphone'\r\n                ? () => {}\r\n                : openVolumeModal\r\n            }\r\n          />\r\n        ) : player.volume < 1 ? (\r\n          <FiVolumeX\r\n            size={20}\r\n            color=\"#fff\"\r\n            title={\r\n              player.selected_device.type === 'Smartphone'\r\n                ? 'Não é possível controlar o volume em aparelhos móveis'\r\n                : ''\r\n            }\r\n            className={\r\n              player.selected_device.type === 'Smartphone' ? 'is-smart' : ''\r\n            }\r\n            onClick={\r\n              player.selected_device.type === 'Smartphone'\r\n                ? () => {}\r\n                : openVolumeModal\r\n            }\r\n          />\r\n        ) : (\r\n          <FiVolume1\r\n            size={20}\r\n            color=\"#fff\"\r\n            title={\r\n              player.selected_device.type === 'Smartphone'\r\n                ? 'Não é possível controlar o volume em aparelhos móveis'\r\n                : ''\r\n            }\r\n            className={\r\n              player.selected_device.type === 'Smartphone' ? 'is-smart' : ''\r\n            }\r\n            onClick={\r\n              player.selected_device.type === 'Smartphone'\r\n                ? () => {}\r\n                : openVolumeModal\r\n            }\r\n          />\r\n        )}\r\n        {volumeModal && (\r\n          <div className=\"volume-container\">\r\n            <div className=\"slider-container\">\r\n              <span className=\"bar\">\r\n                <span\r\n                  className=\"fill\"\r\n                  style={{ width: `${player.volume}%` }}\r\n                  ref={fillRef}\r\n                ></span>\r\n              </span>\r\n              <input\r\n                type=\"range\"\r\n                name=\"time\"\r\n                id=\"time\"\r\n                min={0}\r\n                max={100}\r\n                step={1}\r\n                ref={inputRef}\r\n                defaultValue={player.volume}\r\n                onChange={setVolume}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"devices\">\r\n        <FiAirplay size={20} color=\"#fff\" onClick={openDevicesModal} />\r\n\r\n        {devicesModal && (\r\n          <div className=\"devices-container\">\r\n            <h3>Conectar a um dispositivo</h3>\r\n            <img src={desktop} alt=\"desktop\" />\r\n            <ul className=\"devices\">\r\n              <li className=\"active\" key={player?.selected_device.id}>\r\n                {player?.selected_device.type === 'Computer' ? (\r\n                  <AiOutlineDesktop size={30} color=\"#fff\" className=\"fill\" />\r\n                ) : (\r\n                  <FiTablet size={30} color=\"#fff\" />\r\n                )}\r\n\r\n                <div className=\"info\">\r\n                  <h3>Ouvindo em {player?.selected_device.name}</h3>\r\n                  <div>\r\n                    <FiMusic size={14} color=\"#fff\" />\r\n                    <span>Spotify connect</span>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n              {devices.map((device: any) => {\r\n                if (!device.is_active) {\r\n                  return (\r\n                    <li\r\n                      key={device.id}\r\n                      onClick={() => transferPlayback(device)}\r\n                    >\r\n                      <FiTablet size={30} color=\"#fff\" />\r\n                      <div className=\"info\">\r\n                        <h3>{device.name}</h3>\r\n                        <div>\r\n                          <FiMusic size={14} color=\"#fff\" />\r\n                          <span>Spotify connect</span>\r\n                        </div>\r\n                      </div>\r\n                    </li>\r\n                  );\r\n                }\r\n\r\n                return null;\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Controllers;\r\n","C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\index.tsx",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\pages\\Home\\styles.ts",[],"C:\\Users\\Suel\\Desktop\\dev\\spotify\\src\\components\\Playlist\\index.tsx",[],{"ruleId":"95","severity":1,"message":"96","line":5,"column":3,"nodeType":"97","messageId":"98","endLine":5,"endColumn":9},{"ruleId":"95","severity":1,"message":"99","line":7,"column":3,"nodeType":"97","messageId":"98","endLine":7,"endColumn":13},{"ruleId":"95","severity":1,"message":"100","line":8,"column":3,"nodeType":"97","messageId":"98","endLine":8,"endColumn":16},{"ruleId":"95","severity":1,"message":"101","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},{"ruleId":"95","severity":1,"message":"102","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":28},{"ruleId":"95","severity":1,"message":"103","line":1,"column":49,"nodeType":"97","messageId":"98","endLine":1,"endColumn":57},{"ruleId":"104","severity":1,"message":"105","line":62,"column":6,"nodeType":"106","endLine":62,"endColumn":8,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":68,"column":6,"nodeType":"106","endLine":68,"endColumn":8,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"110","line":77,"column":6,"nodeType":"106","endLine":77,"endColumn":23,"suggestions":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"112","replacedBy":"118"},{"ruleId":"114","replacedBy":"119"},{"ruleId":"95","severity":1,"message":"120","line":17,"column":10,"nodeType":"97","messageId":"98","endLine":17,"endColumn":19},"@typescript-eslint/no-unused-vars","'FiPlay' is defined but never used.","Identifier","unusedVar","'FiSkipBack' is defined but never used.","'FiSkipForward' is defined but never used.","'theme' is defined but never used.","'useCallback' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getResources'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'getCurrentlyMusic'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has a missing dependency: 'player.music.duration_ms'. Either include it or remove the dependency array.",["123"],"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],["124"],["125"],"'BiDesktop' is defined but never used.",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getResources]",{"range":"132","text":"133"},"Update the dependencies array to be: [getCurrentlyMusic]",{"range":"134","text":"135"},"Update the dependencies array to be: [player.music.duration_ms, player.progress]",{"range":"136","text":"137"},[1854,1856],"[getResources]",[1979,1981],"[getCurrentlyMusic]",[2240,2257],"[player.music.duration_ms, player.progress]"]